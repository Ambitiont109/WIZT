# Generated by Django 2.2.1 on 2019-06-03 18:14

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('email', models.CharField(max_length=50, unique=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('phone_number_verified', models.BooleanField(default=False)),
                ('device_token', models.CharField(max_length=50)),
                ('device_type', models.CharField(max_length=50)),
                ('picture', models.URLField(blank=True, max_length=100, null=True)),
                ('total_label_count', models.IntegerField(default=0)),
                ('label_in_use', models.IntegerField(default=100)),
                ('photo_in_use', models.IntegerField(default=20)),
                ('friends_count', models.IntegerField(default=0)),
                ('subscribed_email', models.EmailField(blank=True, max_length=254)),
                ('subscribed_customer_id', models.CharField(max_length=50, null=True)),
                ('subscribed_token_id', models.CharField(blank=True, max_length=100)),
                ('subscription_id', models.CharField(max_length=100, null=True)),
                ('facebook_id', models.CharField(blank=True, max_length=100, null=True)),
                ('google_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=100)),
                ('tags', models.CharField(max_length=200)),
                ('ar_mark_image', models.CharField(blank=True, max_length=150)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labels', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'labels',
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('product_id', models.CharField(max_length=100)),
                ('icon', models.ImageField(upload_to='')),
                ('price', models.FloatField()),
                ('currency', models.CharField(default='USD', max_length=10)),
                ('name', models.CharField(max_length=50)),
                ('sub_name', models.CharField(default='sub_name', max_length=100)),
                ('photo_count', models.IntegerField()),
                ('label_count', models.IntegerField()),
                ('description', models.TextField(default='description')),
                ('is_free', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'plans',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pay_amount', models.FloatField()),
                ('currency', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=100)),
                ('mobile_number', models.CharField(max_length=100)),
                ('shipping_address', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('zip_code', models.CharField(max_length=100)),
                ('token_id', models.CharField(max_length=100)),
                ('ip_address', models.CharField(max_length=100)),
                ('payment_status', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Plan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SubscribeTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('subscribe_email', models.EmailField(max_length=254)),
                ('subscribed_token_id', models.CharField(max_length=100)),
                ('subscription_id', models.CharField(max_length=100)),
                ('plan_name', models.CharField(max_length=100)),
                ('plan_price', models.FloatField(null=True)),
                ('plan_product_id', models.CharField(max_length=100)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Plan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_type', models.IntegerField()),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('send_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sended_notifications', to=settings.AUTH_USER_MODEL)),
                ('send_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notifications',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_cover', models.BooleanField()),
                ('url', models.URLField(max_length=150)),
                ('thumbnail', models.URLField(max_length=150)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Label')),
            ],
            options={
                'db_table': 'images',
            },
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_users', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'friends',
            },
        ),
        migrations.CreateModel(
            name='FloorPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('tags', models.CharField(max_length=300)),
                ('thumbnail', models.URLField()),
                ('image', models.URLField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='floor_plans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'floor_plans',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('country', models.CharField(max_length=30)),
                ('mobile', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=30)),
                ('shipping_address', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=30)),
                ('zip_code', models.IntegerField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'addresses',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='friends',
            field=models.ManyToManyField(related_name='_user_friends_+', through='backend.Friend', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='subscribed_plan',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='backend.Plan'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='ShareLabel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('edit_permission', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='backend.Label')),
                ('share_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared_labels_by_me', to=settings.AUTH_USER_MODEL)),
                ('share_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared_labels_to_me', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'share_labels',
                'unique_together': {('label', 'share_by', 'share_to')},
            },
        ),
        migrations.AddIndex(
            model_name='label',
            index=models.Index(fields=['user'], name='labels_user_id_8f228b_idx'),
        ),
        migrations.AddIndex(
            model_name='image',
            index=models.Index(fields=['label'], name='images_label_i_9f657e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='friend',
            unique_together={('to_user', 'from_user')},
        ),
        migrations.AddIndex(
            model_name='floorplan',
            index=models.Index(fields=['-updated_at'], name='floor_plans_updated_7c142d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='user',
            unique_together={('id', 'email', 'phone_number')},
        ),
    ]
